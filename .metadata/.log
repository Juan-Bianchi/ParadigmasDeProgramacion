!SESSION 2023-05-21 12:38:21.934 -----------------------------------------------
eclipse.buildId=4.27.0.20230309-1200
java.version=17.0.7
java.vendor=Eclipse Adoptium
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=es_ES
Framework arguments:  -product org.eclipse.epp.package.java.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.java.product

This is a continuation of log file C:\Users\Juan\Desktop\CODIFICACIONES-PROGRA1\ParadigmasDeProgramacion\.metadata\.bak_0.log
Created Time: 2023-05-21 16:10:18.057

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-21 16:10:18.057
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-21 16:10:18.068
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:19.927
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			 
		}
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-21 16:10:19.928
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-21 16:10:19.928
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:19.997
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			 
		}
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-21 16:10:19.998
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-21 16:10:19.998
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:26.686
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-21 16:10:26.687
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-21 16:10:26.687
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:26.799
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-21 16:10:26.800
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-21 16:10:26.800
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:28.029
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-21 16:10:28.030
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-21 16:10:28.030
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:31.345
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
		else
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-21 16:10:31.346
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-21 16:10:31.346
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:31.398
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
		else 
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 2 2023-05-21 16:10:31.398
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.ui 4 0 2023-05-21 16:10:31.399
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:561)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:597)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1148)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1325)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:132)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:94)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:91)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:158)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:78)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:207)

!ENTRY org.eclipse.jdt.core 4 4 2023-05-21 16:10:31.402
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package edu.unlam.paradigmas.basicas.ej01;

import java.util.Collection;

public class Rango {
	
	private final boolean limiteIzqAbierto; 
	private final boolean limiteDerAbierto;
	private final double inicio;
	private final double fin;
	
	private Rango(boolean abiertoAIzq, boolean abiertoADer, double inicio, double fin) {
		if(fin < inicio) {
			throw new LimiteIncorrectoRango();
		}
		this.limiteDerAbierto = abiertoADer;
		this.limiteIzqAbierto = abiertoAIzq;
		this.inicio = inicio;
		this.fin = fin;
	}
	
	public double getInicio() {
		return inicio;
	}

	public double getFin() {
		return fin;
	}


	public boolean getLimiteIzqAbierto() {
		return limiteIzqAbierto;
	}

	public boolean getLimiteDerAbierto() {
		return limiteDerAbierto;
	}

	public boolean estaDentroDelRango(double numero) {
		boolean dentroDelRango;
		if(numero > this.inicio && numero < fin) {
			dentroDelRango = true;
		}
		else if(numero > this.inicio && numero == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(numero == this.inicio && numero < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	
	public boolean estaDentroDelRango(Rango rango) {
		boolean dentroDelRango;
		if( rango.getInicio() > this.inicio && rango.getFin() < fin) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.getInicio() && rango.getFin() == this.getFin() && rango.getLimiteDerAbierto() == this.getLimiteDerAbierto() && rango.getLimiteIzqAbierto() == this.getLimiteIzqAbierto()) {
			dentroDelRango = true;
		}
		else if(rango.getInicio() > this.inicio && rango.getFin() == this.fin && ( esCerrado() || esAbiertoAIzquierda()) ){
			dentroDelRango = true;
		}
		else if(rango.getInicio() == this.inicio && rango.getFin() < this.fin && ( esCerrado() || esAbiertoADerecha()) ) {
			dentroDelRango = true;
		}
		else {
			dentroDelRango = false;
		}
		
		return dentroDelRango;			
	}
	
	public boolean hayInterseccion(Rango rango) {
		boolean hayInterseccion = false;
		if( this.getInicio() > rango.getInicio() && this.getInicio() < rango.getFin()) {
			hayInterseccion = true; 
		}
		else 
			   ( this.getFin() > rango.getInicio() && this.getFin() < rango.getFin() );
	}
	
	public boolean esIgualRango(Rango rango) {
		return this.getInicio() == rango.getInicio() && 
			   this.getFin() == rango.getFin() && 
			   this.getLimiteDerAbierto() == rango.getLimiteDerAbierto() && 
			   this.getLimiteDerAbierto() == rango.getLimiteIzqAbierto();
	}
	
	public double ordenaRango(Rango rango) {
		double comparacion = this.getInicio() - rango.getInicio();
		if(comparacion == 0) {
			comparacion = this.getFin() - rango.getFin();
			if(comparacion == 0) {
				if(!this.getLimiteIzqAbierto() && rango.getLimiteIzqAbierto()) {
					comparacion = -1;
				}
				else if(this.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) {
					comparacion = 1;
				}
			}
			if(comparacion == 0) {
				if(!this.getLimiteDerAbierto() && rango.getLimiteDerAbierto()) {
					comparacion = 1;
				}
				else if(this.getLimiteDerAbierto() && !rango.getLimiteDerAbierto()) {
					comparacion = -1;
				}
			}
		}
		return comparacion ;
	}
	
	
	
	@Override
	public String toString() {
		StringBuilder builder = new StringBuilder().append("Rango: ");
		builder.append(this.esAbiertoAIzquierda()? "(": "[");
		builder.append(this.inicio);
		builder.append(", ");
		builder.append(this.fin);
		builder.append(this.esAbiertoADerecha()? ")": "]");
		
		return  builder.toString();
	}
	
	

	private boolean esCerrado() {
		return limiteDerAbierto == limiteIzqAbierto == false;
	}
	
	private boolean esAbierto() {
		return limiteDerAbierto == limiteIzqAbierto == true;
	}
	
	private boolean esAbiertoADerecha() {
		return limiteDerAbierto == true && limiteIzqAbierto == false;
	}
	
	private boolean esAbiertoAIzquierda() {
		return limiteDerAbierto == false && limiteIzqAbierto == true;
	}
	
	public static Rango crearRangoCerrado(double inicio, double fin) {
		return new Rango(false, false, inicio, fin);
	}
	
	public static Rango crearRangoAbierto(double inicio, double fin) {
		return new Rango(true, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoADerecha(double inicio, double fin) {
		return new Rango(false, true, inicio, fin);
	}
	
	public static Rango crearRangoAbiertoAIzquierda(double inicio, double fin) {
		return new Rango(true, false, inicio, fin);
	}
	
	public static Rango creaRangoMaximo(Collection<Rango> rangos) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		for(Rango rango: rangos) {
			if(rango.getInicio() < limInf || (rango.getInicio() == limInf && abiertoIzq && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			if(rango.getFin() > limSup || (rango.getFin() == limSup && abiertoDer && !rango.getLimiteDerAbierto())) {
				limSup = rango.getFin();
				abiertoDer = rango.getLimiteDerAbierto();
			}
		};
		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	
	public Rango calcularInterseccion(Rango rango) {
		double limInf = 0;
		double limSup = 0;
		boolean abiertoDer = true;
		boolean abiertoIzq = true;
		
		if(this.hayInterseccion(rango)) {
			if(rango.getInicio() < this.getInicio() || (rango.getInicio() == this.getInicio() && rango.getLimiteIzqAbierto() && !rango.getLimiteIzqAbierto()) ) {
				limInf = rango.getInicio();
				abiertoDer = rango.getLimiteDerAbierto();
			}
			else {
				limInf = this.getInicio();
				abiertoDer = this.getLimiteDerAbierto();
			}
			if(rango.getFin() > this.getFin() || (rango.getFin() == this.getFin() && !rango.getLimiteDerAbierto() && this.getLimiteDerAbierto()) ) {
				limSup = rango.getFin();
				abiertoIzq = rango.getLimiteIzqAbierto();
			}
			else {
				limSup = this.getFin();
				abiertoIzq = this.getLimiteIzqAbierto();
			}
		}

		
		if(abiertoDer && abiertoIzq)
			return crearRangoAbierto(limInf, limSup);
		else if(!abiertoDer && !abiertoIzq)
			return crearRangoCerrado(limInf, limSup);
		else if(abiertoDer && !abiertoIzq)
			return crearRangoAbiertoADerecha(limInf, limSup);
		else
			return crearRangoAbiertoAIzquierda(limInf, limSup);
	}
	
	public Rango desplazarRango(double desplazamiento) {
		if(this.limiteDerAbierto && this.limiteIzqAbierto)
			return crearRangoAbierto(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(!this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoCerrado(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else if(this.limiteDerAbierto && !this.limiteIzqAbierto)
			return crearRangoAbiertoADerecha(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
		else
			return crearRangoAbiertoAIzquierda(this.getInicio() + desplazamiento, this.getFin() + desplazamiento);
	}
	
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2023-05-21 16:10:31.403
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2023-05-21 16:10:31.403
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:880)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2038)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3882)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1953)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1990)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3124)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2273)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3066)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3419)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1534)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:344)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1272)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:868)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:294)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:286)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:199)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:189)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
